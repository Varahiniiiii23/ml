# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, confusion_matrix, classification_report

# Set a random seed for reproducibility
np.random.seed(42)

# -------------------------
# Linear Regression Example
# -------------------------
# Generate synthetic data for Linear Regression
X_linear = 2 - 3 * np.random.rand(100, 1)  # Feature
y_linear = X_linear**2 + np.random.randn(100, 1) * 0.5  # Target with some noise

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train_linear, X_test_linear, y_train_linear, y_test_linear = train_test_split(X_linear, y_linear, test_size=0.2, random_state=42)

# Create and train the Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train_linear, y_train_linear)

# Make predictions
y_pred_linear = linear_model.predict(X_test_linear)

# Calculate performance metrics for Linear Regression
mse_linear = mean_squared_error(y_test_linear, y_pred_linear)
r2_linear = r2_score(y_test_linear, y_pred_linear)

# -------------------------
# Logistic Regression Example
# -------------------------
# Generate synthetic data for Logistic Regression
X_logistic = np.random.rand(100, 1) * 10  # Feature
y_logistic = (X_logistic > 5).astype(int).ravel()  # Binary target based on a threshold

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train_logistic, X_test_logistic, y_train_logistic, y_test_logistic = train_test_split(X_logistic, y_logistic, test_size=0.2, random_state=42)

# Create and train the Logistic Regression model
logistic_model = LogisticRegression()
logistic_model.fit(X_train_logistic, y_train_logistic)

# Make predictions
y_pred_logistic = logistic_model.predict(X_test_logistic)

# Calculate performance metrics for Logistic Regression
accuracy_logistic = accuracy_score(y_test_logistic, y_pred_logistic)
conf_matrix_logistic = confusion_matrix(y_test_logistic, y_pred_logistic)
class_report_logistic = classification_report(y_test_logistic, y_pred_logistic)

# -------------------------
# Visualization
# -------------------------
plt.figure(figsize=(12, 5))

# Linear Regression Plot
plt.subplot(1, 2, 1)
plt.scatter(X_test_linear, y_test_linear, color='red', label='Actual data')
plt.scatter(X_test_linear, y_pred_linear, color='blue', label='Predicted data (Linear)')
plt.title('Linear Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()

# Logistic Regression Plot
plt.subplot(1, 2, 2)
plt.scatter(X_test_logistic, y_test_logistic, color='red', label='Actual data')
plt.scatter(X_test_logistic, y_pred_logistic, color='blue', label='Predicted data (Logistic)', marker='x')
plt.title('Logistic Regression')
plt.xlabel('X')
plt.ylabel('Predicted Class')
plt.legend()

plt.tight_layout()
plt.show()

# Output performance metrics
print("Linear Regression Performance:")
print(f"Mean Squared Error: {mse_linear:.2f}")
print(f"R^2 Score: {r2_linear:.2f}")

print("\nLogistic Regression Performance:")
print(f"Accuracy: {accuracy_logistic:.2f}")
print("\nConfusion Matrix:\n", conf_matrix_logistic)
print("\nClassification Report:\n", class_report_logistic)
