# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# a) Read the IRIS.csv dataset using the Pandas module
df = pd.read_csv('IRIS.csv')  # Replace with the path to your dataset

# b) Plot the data using a scatter plot "sepal_width" versus "sepal_length" and color species
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='sepal_length', y='sepal_width', hue='species', palette='Set1', s=100)
plt.title('Iris Flower Species Classification')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.legend(title='Species')
plt.grid()
plt.show()

# c) Split the data into features and target variable
X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
y = df['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# d) Fit the data to the model
model = LogisticRegression(max_iter=200)  # Increase max_iter if needed
model.fit(X_train, y_train)

# e) Predict the model with new test data [5, 3, 1, .3]
new_data = np.array([[5, 3, 1, 0.3]])  # New sample
predicted_species = model.predict(new_data)

print(f"Predicted species for the new sample [5, 3, 1, 0.3]: {predicted_species[0]}")

# Optional: Evaluate the model with the test set
y_pred = model.predict(X_test)
print("\nModel Evaluation:")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
